/*
Deployment script for MMTShop

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "MMTShop"
:setvar DefaultFilePrefix "MMTShop"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                DATE_CORRELATION_OPTIMIZATION OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [sys].[databases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [Repository]...';


GO
CREATE SCHEMA [Repository]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Repository].[Products]...';


GO
CREATE TABLE [Repository].[Products] (
    [ProductId]       INT           IDENTITY (1, 1) NOT NULL,
    [CategoryId]      INT           NOT NULL,
    [Sku]             INT           NOT NULL,
    [Name]            VARCHAR (MAX) NOT NULL,
    [Description]     VARCHAR (MAX) NOT NULL,
    [Price]           DECIMAL (18)  NOT NULL,
    [FeaturedProduct] BIT           NOT NULL,
    [Deleted]         BIT           NOT NULL,
    CONSTRAINT [PK_Products] PRIMARY KEY CLUSTERED ([ProductId] ASC)
);


GO
PRINT N'Creating [Repository].[Categories]...';


GO
CREATE TABLE [Repository].[Categories] (
    [CategoryId] INT          IDENTITY (1, 1) NOT NULL,
    [Name]       VARCHAR (50) NOT NULL,
    [Deleted]    BIT          NOT NULL,
    CONSTRAINT [PK_Categories] PRIMARY KEY CLUSTERED ([CategoryId] ASC),
    CONSTRAINT [UK_Categories] UNIQUE NONCLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [Repository].[FK_Products_CategoryId]...';


GO
ALTER TABLE [Repository].[Products]
    ADD CONSTRAINT [FK_Products_CategoryId] FOREIGN KEY ([CategoryId]) REFERENCES [Repository].[Categories] ([CategoryId]);


GO
PRINT N'Creating [Repository].[spProduct]...';


GO
CREATE PROCEDURE [Repository].[spProduct]
	@CategoryName	varchar(50),
	@Sku			int,
	@Name			varchar(255),
	@Description	varchar(max),
	@Price			decimal
AS
BEGIN
	SET NOCOUNT ON

	DECLARE @FeaturedProduct bit 
	
	IF @Sku LIKE '1%' OR @Sku LIKE '2%' OR @Sku LIKE '3%'
		SET @FeaturedProduct = 1

	DECLARE @CategoryId int
	SET @CategoryId = (SELECT [CategoryId] FROM [Categories] WHERE [Name] = @CategoryName)
	
	IF @CategoryId IS NOT NULL AND @Sku IS NOT NULL AND @Name IS NOT NULL AND @Description IS NOT NULL AND @Price IS NOT NULL
	BEGIN
		UPDATE 
			 [Repository].[Products]
		SET 
			 [CategoryId] = @CategoryId,
			 [Sku] = @Sku,
			 [Name] = @Name,
			 [Description] = @Description,
			 [Price] = @Price
		WHERE
			[CategoryId] = @CategoryId
			AND [Sku] = @Sku

		IF @@ROWCOUNT = 0
			INSERT INTO [Repository].[Products]
			(
				[CategoryId],
				[Sku],
				[Name],
				[Description],
				[Price],
				[FeaturedProduct],
				[Deleted]
			)
			VALUES
			(
				@CategoryId,
				@Sku,
				@Name,
				@Description,
				@Price,
				@FeaturedProduct,
				0
			)
	END
END
GO
PRINT N'Creating [Repository].[spCategory]...';


GO
CREATE PROCEDURE [Repository].[spCategory]
      @Name varchar(50)
AS
BEGIN
	SET NOCOUNT ON

	IF @Name IS NOT NULL
	BEGIN
		UPDATE 
			 [Repository].[Categories]
		SET 
			 [Name] = @Name
		WHERE
			 [Name] = @Name

		IF @@ROWCOUNT = 0
			INSERT INTO [Repository].[Categories]
			(
				[Name],
				[Deleted]
			)
			VALUES
			(
				@Name,
				0
			)
	END
END
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c1deb91a-7c24-428c-8e65-df3046717e7c')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c1deb91a-7c24-428c-8e65-df3046717e7c')

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
